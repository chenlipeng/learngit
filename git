//create a new repository on the command line
echo "# somefile" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:chenlipeng/somefile.git
git push -u origin master

//push an existing repository from the command line
git remote add origin git@github.com:chenlipeng/somefile.git
git push -u origin master

//由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

//clone 到指定目录 learnGit-newDir
git clone git@github.com:chenlipeng/learnGit.git [newDirectory]

//clone 到默认文件夹learnGit
git clone git@github.com:chenlipeng/learnGit.git

//从分支[branch-name] 进行更新 一般为master
git pull origin [branch-name]

//创建自己的分支
git branch [branch-name]

//查看工作区所有分支信息
git branch

//改变当前开发分支
git checkout [branch-name]

//创建分支并切换到新建的分支
git checkout -b <branch-name>
//git checkout命令加上-b参数表示创建并切换，相当于以下两条命令 
git branch <branch-name>
git checkout <branch-name>

//删除本地分支
git branch -d <branch-name>

//强行删除本地分支 - 通常用于删除尚未合并的分支 采用-d并不能成功删除
git branch -D <branch-name>

//合并某分支到当前分支
git merge <branch-name>

//用命令可以看到分支合并图。
git log --graph <--pretty=oneline>

//把当前工作现场“储藏”起来，等以后恢复现场后继续工作 - 通常用作在该分支进行紧急bug修复 所以暂存当前分支未提交的修改 然后修bug
git stash

//查看之前保存的工作现场
git stash list

//恢复工作现场 
//法一 恢复后，stash内容并不删除 你需要用[git stash drop]来删除
git stash apply

//法二 恢复的同时把stash内容也删了
git stash pop

//删除之前保存的现场
git stash drop

//以多次stash，恢复的时候，先用[git stash list]查看，然后恢复指定的stash
git stash apply stash@{0}

//在本地修改后将代码上传远程仓库的步骤
//添加修改的文件 可多次添加
git add [fileName]

git commit -m "对本次修改进行说明"
git push origin [branch-name]


//添加子模块
git submodule add git@github.com:chenlipeng/learnGit.git

//对子模块进行更新
git submodule update

//版本回退
//回退到上一次commit
git reset --hard HEAD^
//回退到上上一次commit
git reset --hard HEAD^^

//回退到某一次commit
git reset --hard HEAD^^

//提交回退后的版本 -f 表示force 强制push
git push -f origin [branch-name]

//查看当前状态
git status

//查看所有修改
git diff

//查看某个文件的修改
git diff [file-name]

//删除文件
git rm [file-name]

//删除目录
git rm -r [dir-name]

//暂存区
/*
 * 修改在工作区进行
 * 使用[git add [*]|[file-name]]命令会将工作区的文件修改添加到暂存区
 * 使用[git commit]命令会将暂存区的所有内容提交到当前分支

 * 使用[git checkout -- <filename>]会将filename的更改丢弃
 * 使用[git reset HEAD <filename>]会将提交至暂存区的更改撤回到工作区
 * 使用[git reset --hard HEAD^]可以回退[git commit]提交的内容
 */


//让Git显示颜色
git config --global color.ui true


//注意，标签不是按时间顺序列出，而是按字母排序的
//创建标签 - 该方式为默认方式 所打标签在最新提交的commit上
git tag <tag-name>

//查看所有标签
git tag

//对某次commit打标签
git tag <tag-name> <commit-id>

//查看标签信息
git show <tag-name>

//创建带有说明的标签 用-a指定标签名，-m指定说明文字
git tag -a <tag-name> -m 'some ' <commit-id>

//删除标签
git tag -d <tag-name>

//推送某个标签到远程
git push origin <tag-name>

//一次性推送全部尚未推送到远程的本地标签
git push origin --tags

//如果标签已经推送到远程，要删除远程标签
//先从本地删除
git tag -d <tag-name>

//从远程删除
git push origin :refs/tags/<tag-name>
